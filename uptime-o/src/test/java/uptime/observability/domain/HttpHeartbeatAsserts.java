package uptime.observability.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class HttpHeartbeatAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHttpHeartbeatAllPropertiesEquals(HttpHeartbeat expected, HttpHeartbeat actual) {
        assertHttpHeartbeatAutoGeneratedPropertiesEquals(expected, actual);
        assertHttpHeartbeatAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHttpHeartbeatAllUpdatablePropertiesEquals(HttpHeartbeat expected, HttpHeartbeat actual) {
        assertHttpHeartbeatUpdatableFieldsEquals(expected, actual);
        assertHttpHeartbeatUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHttpHeartbeatAutoGeneratedPropertiesEquals(HttpHeartbeat expected, HttpHeartbeat actual) {
        assertThat(actual)
            .as("Verify HttpHeartbeat auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHttpHeartbeatUpdatableFieldsEquals(HttpHeartbeat expected, HttpHeartbeat actual) {
        assertThat(actual)
            .as("Verify HttpHeartbeat relevant properties")
            .satisfies(a -> assertThat(a.getExecutedAt()).as("check executedAt").isEqualTo(expected.getExecutedAt()))
            .satisfies(a -> assertThat(a.getSuccess()).as("check success").isEqualTo(expected.getSuccess()))
            .satisfies(a -> assertThat(a.getResponseTimeMs()).as("check responseTimeMs").isEqualTo(expected.getResponseTimeMs()))
            .satisfies(a -> assertThat(a.getResponseSizeBytes()).as("check responseSizeBytes").isEqualTo(expected.getResponseSizeBytes()))
            .satisfies(a -> assertThat(a.getResponseStatusCode()).as("check responseStatusCode").isEqualTo(expected.getResponseStatusCode())
            )
            .satisfies(a ->
                assertThat(a.getResponseContentType()).as("check responseContentType").isEqualTo(expected.getResponseContentType())
            )
            .satisfies(a -> assertThat(a.getResponseServer()).as("check responseServer").isEqualTo(expected.getResponseServer()))
            .satisfies(a ->
                assertThat(a.getResponseCacheStatus()).as("check responseCacheStatus").isEqualTo(expected.getResponseCacheStatus())
            )
            .satisfies(a -> assertThat(a.getDnsLookupMs()).as("check dnsLookupMs").isEqualTo(expected.getDnsLookupMs()))
            .satisfies(a -> assertThat(a.getTcpConnectMs()).as("check tcpConnectMs").isEqualTo(expected.getTcpConnectMs()))
            .satisfies(a -> assertThat(a.getTlsHandshakeMs()).as("check tlsHandshakeMs").isEqualTo(expected.getTlsHandshakeMs()))
            .satisfies(a -> assertThat(a.getTimeToFirstByteMs()).as("check timeToFirstByteMs").isEqualTo(expected.getTimeToFirstByteMs()))
            .satisfies(a -> assertThat(a.getWarningThresholdMs()).as("check warningThresholdMs").isEqualTo(expected.getWarningThresholdMs())
            )
            .satisfies(a ->
                assertThat(a.getCriticalThresholdMs()).as("check criticalThresholdMs").isEqualTo(expected.getCriticalThresholdMs())
            )
            .satisfies(a -> assertThat(a.getErrorType()).as("check errorType").isEqualTo(expected.getErrorType()))
            .satisfies(a -> assertThat(a.getErrorMessage()).as("check errorMessage").isEqualTo(expected.getErrorMessage()))
            .satisfies(a -> assertThat(a.getRawRequestHeaders()).as("check rawRequestHeaders").isEqualTo(expected.getRawRequestHeaders()))
            .satisfies(a -> assertThat(a.getRawResponseHeaders()).as("check rawResponseHeaders").isEqualTo(expected.getRawResponseHeaders())
            )
            .satisfies(a -> assertThat(a.getRawResponseBody()).as("check rawResponseBody").isEqualTo(expected.getRawResponseBody()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHttpHeartbeatUpdatableRelationshipsEquals(HttpHeartbeat expected, HttpHeartbeat actual) {
        assertThat(actual)
            .as("Verify HttpHeartbeat relationships")
            .satisfies(a -> assertThat(a.getMonitor()).as("check monitor").isEqualTo(expected.getMonitor()))
            .satisfies(a -> assertThat(a.getAgent()).as("check agent").isEqualTo(expected.getAgent()));
    }
}
